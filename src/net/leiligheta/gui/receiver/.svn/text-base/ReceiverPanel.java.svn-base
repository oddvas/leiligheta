/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReceiverPanel.java
 *
 * Created on 03.jan.2012, 18:49:41
 */

package net.leiligheta.gui.receiver;

import java.awt.event.ItemEvent;

import net.leiligheta.network.ClientMasterInterface;
import static net.leiligheta.resources.CommandStrings.*;

/**
 * 
 * @author oddvar
 */
public class ReceiverPanel extends javax.swing.JPanel {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private ClientMasterInterface master;
	private boolean inputSourceFromServer;

	/** Creates new form ReceiverPanel */
	public ReceiverPanel() {
		initComponents();
		inputSourceButtonGroup.add(jToggleButtonAux);
		inputSourceButtonGroup.add(jToggleButtonXBMC);
		inputSourceButtonGroup.add(jToggleButtonTuner);
		inputSourceButtonGroup.add(jToggleButtonTV);
		inputSourceButtonGroup.add(jToggleButtonPS3);
		inputSourceButtonGroup.add(jToggleButtonPhono);

	}

	public void setMaster(ClientMasterInterface master) {
		this.master = master;
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	
	// <editor-fold defaultstate="collapsed"
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;
		bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

		inputSourceButtonGroup = new javax.swing.ButtonGroup();
		powerButton = new javax.swing.JToggleButton();
		jSliderMainVolume = new javax.swing.JSlider();
		jLabelMainVolume = new javax.swing.JLabel();
		jSliderSubLevel = new javax.swing.JSlider();
		jLabelSubLevel = new javax.swing.JLabel();
		jSliderCenterLevel = new javax.swing.JSlider();
		jLabelCenterLevel = new javax.swing.JLabel();
		jPanel1 = new javax.swing.JPanel();
		jToggleButtonTV = new javax.swing.JToggleButton();
		jToggleButtonPhono = new javax.swing.JToggleButton();
		jToggleButtonXBMC = new javax.swing.JToggleButton();
		jToggleButtonAux = new javax.swing.JToggleButton();
		jToggleButtonPS3 = new javax.swing.JToggleButton();
		jToggleButtonTuner = new javax.swing.JToggleButton();

		setBorder(javax.swing.BorderFactory.createTitledBorder("Receiver"));
		setLayout(new java.awt.GridBagLayout());

		powerButton.setFont(new java.awt.Font("Tahoma", 1, 18));
		powerButton.setText("Power");
		powerButton.addItemListener(new java.awt.event.ItemListener() {
			@Override
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				powerButtonItemStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
		gridBagConstraints.ipadx = 10;
		gridBagConstraints.ipady = 10;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
		add(powerButton, gridBagConstraints);

		jSliderMainVolume.setMajorTickSpacing(10);
		jSliderMainVolume.setMaximum(80);
		jSliderMainVolume.setPaintTicks(true);
		jSliderMainVolume.setValue(30);
		jSliderMainVolume.setBorder(javax.swing.BorderFactory.createTitledBorder("Main Volume"));
		jSliderMainVolume.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jSliderMainVolumeStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(jSliderMainVolume, gridBagConstraints);

		jLabelMainVolume.setFont(new java.awt.Font("Tahoma", 0, 18));
		jLabelMainVolume.setMinimumSize(new java.awt.Dimension(30, 22));
		jLabelMainVolume.setPreferredSize(new java.awt.Dimension(30, 22));

		@SuppressWarnings("rawtypes")
		org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderMainVolume, org.jdesktop.beansbinding.ELProperty.create("${value}"), jLabelMainVolume, org.jdesktop.beansbinding.BeanProperty.create("text"));
		bindingGroup.addBinding(binding);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		add(jLabelMainVolume, gridBagConstraints);

		jSliderSubLevel.setMajorTickSpacing(5);
		jSliderSubLevel.setMaximum(12);
		jSliderSubLevel.setMinimum(-15);
		jSliderSubLevel.setMinorTickSpacing(1);
		jSliderSubLevel.setPaintTicks(true);
		jSliderSubLevel.setSnapToTicks(true);
		jSliderSubLevel.setValue(0);
		jSliderSubLevel.setBorder(javax.swing.BorderFactory.createTitledBorder("Subwoofer Level"));
		jSliderSubLevel.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jSliderSubLevelStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(jSliderSubLevel, gridBagConstraints);

		jLabelSubLevel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
		jLabelSubLevel.setMaximumSize(new java.awt.Dimension(30, 22));
		jLabelSubLevel.setMinimumSize(new java.awt.Dimension(30, 22));
		jLabelSubLevel.setPreferredSize(new java.awt.Dimension(30, 22));

		binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderSubLevel, org.jdesktop.beansbinding.ELProperty.create("${value}"), jLabelSubLevel, org.jdesktop.beansbinding.BeanProperty.create("text"));
		bindingGroup.addBinding(binding);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		add(jLabelSubLevel, gridBagConstraints);

		jSliderCenterLevel.setMajorTickSpacing(5);
		jSliderCenterLevel.setMaximum(12);
		jSliderCenterLevel.setMinimum(-12);
		jSliderCenterLevel.setMinorTickSpacing(1);
		jSliderCenterLevel.setPaintTicks(true);
		jSliderCenterLevel.setSnapToTicks(true);
		jSliderCenterLevel.setValue(0);
		jSliderCenterLevel.setBorder(javax.swing.BorderFactory.createTitledBorder("Center Level"));
		jSliderCenterLevel.addChangeListener(new javax.swing.event.ChangeListener() {
			@Override
			public void stateChanged(javax.swing.event.ChangeEvent evt) {
				jSliderCenterLevelStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.gridwidth = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.weightx = 1.0;
		add(jSliderCenterLevel, gridBagConstraints);

		jLabelCenterLevel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
		jLabelCenterLevel.setMaximumSize(new java.awt.Dimension(30, 22));
		jLabelCenterLevel.setMinimumSize(new java.awt.Dimension(30, 22));
		jLabelCenterLevel.setPreferredSize(new java.awt.Dimension(30, 22));

		binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, jSliderCenterLevel, org.jdesktop.beansbinding.ELProperty.create("${value}"), jLabelCenterLevel, org.jdesktop.beansbinding.BeanProperty.create("text"));
		bindingGroup.addBinding(binding);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		add(jLabelCenterLevel, gridBagConstraints);

		jPanel1.setLayout(new java.awt.GridBagLayout());

		jToggleButtonTV.setText("TV");
		jToggleButtonTV.addItemListener(new java.awt.event.ItemListener() {
			@Override
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				jToggleButtonTVItemStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel1.add(jToggleButtonTV, gridBagConstraints);

		jToggleButtonPhono.setText("Phono");
		jToggleButtonPhono.addItemListener(new java.awt.event.ItemListener() {
			@Override
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				jToggleButtonPhonoItemStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel1.add(jToggleButtonPhono, gridBagConstraints);

		jToggleButtonXBMC.setText("XBMC");
		jToggleButtonXBMC.addItemListener(new java.awt.event.ItemListener() {
			@Override
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				jToggleButtonXBMCItemStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel1.add(jToggleButtonXBMC, gridBagConstraints);

		jToggleButtonAux.setText("Aux");
		jToggleButtonAux.addItemListener(new java.awt.event.ItemListener() {
			@Override
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				jToggleButtonAuxItemStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel1.add(jToggleButtonAux, gridBagConstraints);

		jToggleButtonPS3.setText("PS3");
		jToggleButtonPS3.addItemListener(new java.awt.event.ItemListener() {
			@Override
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				jToggleButtonPS3ItemStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel1.add(jToggleButtonPS3, gridBagConstraints);

		jToggleButtonTuner.setText("Tuner");
		jToggleButtonTuner.addItemListener(new java.awt.event.ItemListener() {
			@Override
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				jToggleButtonTunerItemStateChanged(evt);
			}
		});
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		jPanel1.add(jToggleButtonTuner, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.insets = new java.awt.Insets(5, 5, 20, 5);
		add(jPanel1, gridBagConstraints);

		bindingGroup.bind();
	}// </editor-fold>//GEN-END:initComponents

	private void jToggleButtonTVItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButtonTVItemStateChanged
		if (!inputSourceFromServer) {
			master.receiverSetInputSource(SOURCE_TV, null);
		}
		inputSourceFromServer = false;
	}//GEN-LAST:event_jToggleButtonTVItemStateChanged

	private void jToggleButtonPhonoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButtonPhonoItemStateChanged
		if (!inputSourceFromServer) {
			master.receiverSetInputSource(SOURCE_PHONO, null);
		}
		inputSourceFromServer = false;
	}//GEN-LAST:event_jToggleButtonPhonoItemStateChanged

	private void jToggleButtonXBMCItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButtonXBMCItemStateChanged
		if (!inputSourceFromServer) {
			master.receiverSetInputSource(SOURCE_XBMC, null);
		}
		inputSourceFromServer = false;
	}//GEN-LAST:event_jToggleButtonXBMCItemStateChanged

	private void jToggleButtonAuxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButtonAuxItemStateChanged
		if (!inputSourceFromServer) {
			master.receiverSetInputSource(SOURCE_AUX, null);
		}
		inputSourceFromServer = false;
	}//GEN-LAST:event_jToggleButtonAuxItemStateChanged

	private void jToggleButtonPS3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButtonPS3ItemStateChanged
		if (!inputSourceFromServer) {
			master.receiverSetInputSource(SOURCE_PS3, null);
		}
		inputSourceFromServer = false;
	}//GEN-LAST:event_jToggleButtonPS3ItemStateChanged

	private void jToggleButtonTunerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jToggleButtonTunerItemStateChanged
		if (!inputSourceFromServer) {
			master.receiverSetInputSource(SOURCE_TUNER, null);
		}
		inputSourceFromServer = false;
	}//GEN-LAST:event_jToggleButtonTunerItemStateChanged

	private void jSliderCenterLevelStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSliderCenterLevelStateChanged
		if (jSliderCenterLevel.getValueIsAdjusting()) {
			master.receiverSetCenterLevel(jSliderCenterLevel.getValue(), null);
		}
	}//GEN-LAST:event_jSliderCenterLevelStateChanged

	private void jSliderMainVolumeStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSlider1StateChanged
		if (jSliderMainVolume.getValueIsAdjusting())
		{
			master.receiverSetMainVolume(jSliderMainVolume.getValue(), null);
			// jLabel1.setText("" + jSlider1.getValue());
		}
	}// GEN-LAST:event_jSlider1StateChanged

	private void jSliderSubLevelStateChanged(javax.swing.event.ChangeEvent evt) {// GEN-FIRST:event_jSlider2StateChanged
		if (jSliderSubLevel.getValueIsAdjusting())
		{
			master.receiverSetSubLevel(jSliderSubLevel.getValue(), null);
			// jLabel2.setText("" + jSlider2.getValue());
		}
	}// GEN-LAST:event_jSlider2StateChanged

	private void powerButtonItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_powerButtonItemStateChanged
		if (evt.getStateChange() == ItemEvent.SELECTED) {
			master.receiverSetPower("1", null);
		} else if (evt.getStateChange() == ItemEvent.DESELECTED) {
			master.receiverSetPower("0", null);
		}
		setButtonsEnabled(powerButton.isSelected());
	}// GEN-LAST:event_powerButtonItemStateChanged

	private void setButtonsEnabled(boolean enabled) {
		jLabelCenterLevel.setEnabled(enabled);
		jLabelSubLevel.setEnabled(enabled);
		jLabelMainVolume.setEnabled(enabled);
		jSliderCenterLevel.setEnabled(enabled);
		jSliderSubLevel.setEnabled(enabled);
		jSliderMainVolume.setEnabled(enabled);
		jToggleButtonAux.setEnabled(enabled);
		jToggleButtonPS3.setEnabled(enabled);
		jToggleButtonPhono.setEnabled(enabled);
		jToggleButtonTV.setEnabled(enabled);
		jToggleButtonTuner.setEnabled(enabled);
		jToggleButtonXBMC.setEnabled(enabled);
	}
	
	public void setControlEnabled(boolean enabled) {
		jLabelCenterLevel.setEnabled(enabled);
		jLabelSubLevel.setEnabled(enabled);
		jLabelMainVolume.setEnabled(enabled);
		jSliderCenterLevel.setEnabled(enabled);
		jSliderSubLevel.setEnabled(enabled);
		jSliderMainVolume.setEnabled(enabled);
		jToggleButtonAux.setEnabled(enabled);
		jToggleButtonPS3.setEnabled(enabled);
		jToggleButtonPhono.setEnabled(enabled);
		jToggleButtonTV.setEnabled(enabled);
		jToggleButtonTuner.setEnabled(enabled);
		jToggleButtonXBMC.setEnabled(enabled);
		powerButton.setEnabled(enabled);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.ButtonGroup inputSourceButtonGroup;
	private javax.swing.JLabel jLabelCenterLevel;
	private javax.swing.JLabel jLabelMainVolume;
	private javax.swing.JLabel jLabelSubLevel;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JSlider jSliderCenterLevel;
	private javax.swing.JSlider jSliderMainVolume;
	private javax.swing.JSlider jSliderSubLevel;
	private javax.swing.JToggleButton jToggleButtonAux;
	private javax.swing.JToggleButton jToggleButtonPS3;
	private javax.swing.JToggleButton jToggleButtonPhono;
	private javax.swing.JToggleButton jToggleButtonTV;
	private javax.swing.JToggleButton jToggleButtonTuner;
	private javax.swing.JToggleButton jToggleButtonXBMC;
	private javax.swing.JToggleButton powerButton;
	private org.jdesktop.beansbinding.BindingGroup bindingGroup;
	// End of variables declaration//GEN-END:variables

	public void setPower(boolean power) {
		powerButton.setSelected(power);
		setButtonsEnabled(power);
	}

	public void setMainVolume(int volume) {
		jSliderMainVolume.setValue(volume);
	}

	public void setSubLevel(int level) {
		jSliderSubLevel.setValue(level);
	}

	public void setCenterLevel(int level) {
		jSliderCenterLevel.setValue(level);
	}

	public void setInputSource(int sourceID) {
		inputSourceFromServer = true;
		switch (sourceID) {
		case SOURCE_AUX: jToggleButtonAux.setSelected(true); break;
		case SOURCE_TUNER: jToggleButtonTuner.setSelected(true); break;
		case SOURCE_TV: jToggleButtonTV.setSelected(true); break;
		case SOURCE_PHONO: jToggleButtonPhono.setSelected(true); break;
		case SOURCE_PS3: jToggleButtonPS3.setSelected(true); break;
		case SOURCE_XBMC: jToggleButtonXBMC.setSelected(true); break;
		default: inputSourceButtonGroup.clearSelection(); break;
		}
	}

}
